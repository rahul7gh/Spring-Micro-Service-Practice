What is SPring cloud:- Collection of different projects each of which provides a esy wy to
satisy the common patterns observed in any miroservice based application.
Many of these projects are based on projects created by different organization.

1. Spring Cloud Config :- All application config data such environment details is accssed
thoruh a cetralized service rather than hardcoding it somewhere within the applicatiion itself

This ensures that no matter how many instances of MicroService exist tey all will have same
configuration.
This proj has its own property manageent repo but can also integrate with OpenSource Project such as
Git,Consul,Eureka,etc.

2.Spring coud service discovery: Hardcoding the Microservice endpoints will reult
in very poor change management. Lso or clients to keep track of tese becomes a tedious task.
This proj allows to map a mircoservices to logical names,Through registraion and deregs. framework

Consul,ZooKeeper and Eureka are most widely used.

3.Spring Cloud Load Balamcer and Resillience4j:-
A Robust fraemwork to handle the failures as well as the effective usage of avilable 
microservice instances.

4.Spring cloud API Gateway:-
ENsure all calls are passed torugh a single front door. Soo all the actual working services
are behnid this project. ALlows us to configure authentication and authorizzation
in a cetralized manner.
Basically it routes requests to appropriate applicatins.

5.Spring Cloud Stream: easy integration of asynchrnous messaginginto you application.

6.SPring Cloud sleuth:- allows tarcking particular transaction in your ecosystem through
a framework of identifiers.Real power comes when this is integrated with logging aplications
such as ELK stak,Zipkin,etc.

7.Spring Cloud Security:
authentiation and authorizaton project. Great suppot to implement entire security 
using token based approach based on Oauth2 and JWTs. 
 
RestTemplate class is configured to work with Sevice discovry as well as 
load balancing. so all you need to do is configure your applicaton with a discovery 
microservice and you are good to go.

Such client side balancing has advangate over centrlized load balancer as if te cenralized one goes down 
entire ecosystem gets diturbed.


 <New-Content>
 Internationalization:- application that can work in multiple languages and format.
 So based on the "Locale" Property of incoming request we decide which 
 languge to choose.
 
 in our example the files will be "messages_<localeName>.properties"
 and by default if locale is not found it looks for "messages.properties"
 and if we don't provide it will use whatevr confgiyred in the services.
 
 in each of these files we have key-value pairs.
 keys are same in all the files we change values wrt to the locale and langauge.
 so code will read the values from the respective file and messages.
 
 How will we get Locale from request:-
  Request Header named "Accept-Language".
   we can map this with Locale Object.

<New Content>
 Heateos:- Hypermedia as the ngine of application state 
 a small project based on hateos principle which states that the json response should have
 a set of related links to the json response in the context. you can use this api to quickly configure links.
 
 ACtuator:- Microservices in complex env may have 1000s of runnning instances so keeping tract of them wheteher they
 work properly or failing is a tedious task.
 also clients will be communicating to our application via service discovery application. so this component must be
 able to check on these instances and take actions usch as removing insances , notifying stake holders and bringing up
 other instances. this health check facility is provided by actuator which exposes an api to provide info on all your services.
 
 Deployment:- fast,easy and scalable solution is to use containers. Docker as the container engine.
 
** to automatically build images we have 2 options:-
 I]. com.spotify.dockerfile-maven-plugin :- this needs to be configured using maven goal and by providing
 our own docker filel in projects root directoy;
 ***********Note that all the files such as jar must also be in the child directory as the dokcer file..that is
 all the reqd resources must be available on contextdirectory of docker file.
 use some other plugin to copy your buil artifacts to docker context directry of your project.
 and execute the docker image buil goal via maven pom.xml
 
 There are several ways to build a dockerfile effectively:-
 1. basic:- directly copy the Jar file and execute it via entry point.
 2.mulltistage builds:- 2 stage process where we first put our jar in one image and in 2nd stage we extract and run it 
 as Java applicaton 
 
 #mvn package dockerfile:build    ===> you use this goal to execute and build the image.
 
 II] from spring booot 2.4.0 and if you have docker and coker compose installed you can use the feature given by spring 
 itself
 Buildpacks are tools that provide application  and framework dependencies transforming our source code runnable aplication image
 directly.
 
 #spring-boot:build-image    ===> executing this goal will generate a completely ready docker image.
 
 <plugin>
 <groupId>org.springframework.boot</groupId>
 <artifactId>spring-boot-maven-plugin</artifactId>
 <configuration>
 <image>
 <name>${docker.image.prefix}/${project.artifactId}:latest</name>
 </image>
 </configuration>
</plugin>

you can change configuration by using above plugin configuation.

once the image is built we ca execute it as follow to spin up a conatiner..we can map it to a port on your host system.
#docker run -it -p8080:8080 docker.io/library/licensing-service:0.0.1-SNAPSHOT
 
 the porblem with above two apporach is that everything right from the scarcth need to be added to docker images.
 when you add an instrcution a seprate layer gets added in image which is reusable.
 
 the Third approach allows our application to be divided innto layers based on how likely it is to change
 for example libs,dependncies may not change that frequenlty while the application code changes frequnetly
 so subsequent builds will have a new application alyer thereby making it faster.
 
 refer to book for more info. page no, 106 (Layered Jars)
 
 
 <New-Content> The Configuartion data must be completely separted from the application. so we must version control the 
 confgiyartion data. Also instead of making your micrservices read from repositories directly have a centralized service
 takin care of fetching and managing the information.
 
 SO when a microservice starts it will hit the endpoint and get the reqd info.
 this allows our application to work irrespective of actual datastores used to hold our config data.
 Also now that config is being managed separately....if itchanges all the servcies must be notified to refresh the
 configs that they have been using.
 
 There arae several open source projects available such as EUreka,ZooKeeper,etcd,Consul,Spring Cloud Config Server,etc.
 
 
 
 